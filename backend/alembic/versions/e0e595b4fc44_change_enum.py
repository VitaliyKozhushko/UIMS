"""change enum

Revision ID: e0e595b4fc44
Revises: fe84ba20e1a9
Create Date: 2024-10-07 14:41:44.087876

"""
from typing import Sequence, Union

from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e0e595b4fc44'
down_revision: Union[str, None] = 'fe84ba20e1a9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

new_enum_values = ['MALE', 'FEMALE', 'OTHER', 'UNKNOWN']


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"CREATE TYPE gender_name_temp AS ENUM ({', '.join([repr(value) for value in new_enum_values])});")
    op.alter_column('patients', 'gender',
                    existing_type=postgresql.ENUM(name='gender_name'),
                    type_=postgresql.ENUM(name='gender_name_temp'),
                    postgresql_using='gender::text::gender_name_temp',
                    nullable=True)
    op.execute("DROP TYPE gender_name;")
    op.execute("ALTER TYPE gender_name_temp RENAME TO gender_name;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE TYPE gender_name_old AS ENUM ('male', 'female', 'other', 'unknown');")
    op.alter_column('patients', 'gender',
                    existing_type=postgresql.ENUM(name='gender_name'),
                    type_=postgresql.ENUM(name='gender_name_old'),
                    postgresql_using='gender::text::gender_name_old',
                    nullable=True)
    op.execute("DROP TYPE gender_name;")
    op.execute("ALTER TYPE gender_name_old RENAME TO gender_name;")
    # ### end Alembic commands ###
